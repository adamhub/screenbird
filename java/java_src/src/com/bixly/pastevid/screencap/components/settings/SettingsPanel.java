/*
 * SettingsPanel.java
 * 
 * Version 1.0
 *
 * Created on Nov 30, 2011, 9:38:09 AM
 * 17 May 2013
 */
package com.bixly.pastevid.screencap.components.settings;

import com.bixly.pastevid.recorders.Recorder;
import com.bixly.pastevid.util.LogUtil;
import com.bixly.pastevid.util.view.JSliderCustomKnob;
import java.awt.Dimension;
import javax.swing.JFrame;
import javax.swing.JSlider;


/**
 *
 * @author cevaris
 */
public class SettingsPanel extends javax.swing.JPanel {
    
    /**
     * Dimensions for the settings panel.
     */
    public static final Dimension SETTINGS_SIZE = new Dimension(333, 46);
    
    /**
     * Recorder for this settings panel.
     */
    private Recorder recorder;

    /** 
     * Creates new form SettingsPanel 
     */
    public SettingsPanel() {
        initComponents();
        this.changeSize(SETTINGS_SIZE);
        this.jSliderFast.setUI(new JSliderCustomKnob(this.jSliderFast));
    }
    
    public void setRecorder(Recorder recorder) {
        this.recorder = recorder;
    }

    /**
     * Refreshes the display of the SettingsPanel.
     */
    private void redrawWindow() {
        this.setVisible(false);
        this.setVisible(true);
    }
    
    /**
     * Changes the dimensions of the settings panel.
     * @param size the Dimension object for the new size
     */
    private void changeSize(Dimension size) {
        this.setPreferredSize(size);
        this.setMinimumSize(size);
        this.setMaximumSize(size);
        this.setSize(size);
        this.revalidate();
    }
    
    /**
     * Returns the slider for the video quality setting.
     * @return 
     */
    public JSlider getVideoQualitySlider() {
        return this.jSliderFast;
    }
    
    /**
     * Sets the value for the video quality slider based on the recorder values.
     */
    public void loadPastevidSettings(){
        Integer videoQualityValue = this.recorder.loadVideoQuality();
        if (videoQualityValue != null){
            this.jSliderFast.setValue(videoQualityValue);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jfSettings = new com.bixly.pastevid.util.view.JRoundedPanel();
        btnCancel1 = new javax.swing.JButton();
        btnMinimize = new javax.swing.JButton();
        lblVideoQuality = new javax.swing.JLabel();
        jSliderFast = new javax.swing.JSlider();

        jfSettings.setMaximumSize(new java.awt.Dimension(333, 46));
        jfSettings.setMinimumSize(new java.awt.Dimension(333, 46));
        jfSettings.setPreferredSize(new java.awt.Dimension(333, 46));

        btnCancel1.setBackground(java.awt.Color.darkGray);
        btnCancel1.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bixly/pastevid/resources/x.png"))); // NOI18N
        btnCancel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCancel1.setDoubleBuffered(true);
        btnCancel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnCancel1.setMaximumSize(new java.awt.Dimension(24, 24));
        btnCancel1.setMinimumSize(new java.awt.Dimension(24, 24));
        btnCancel1.setName("btnCancel"); // NOI18N
        btnCancel1.setPreferredSize(new java.awt.Dimension(24, 24));
        btnCancel1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bixly/pastevid/resources/x.png"))); // NOI18N
        btnCancel1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bixly/pastevid/resources/x.png"))); // NOI18N
        btnCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancel1ActionPerformed(evt);
            }
        });

        btnMinimize.setBackground(java.awt.Color.darkGray);
        btnMinimize.setForeground(new java.awt.Color(255, 255, 255));
        btnMinimize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bixly/pastevid/resources/min.png"))); // NOI18N
        btnMinimize.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnMinimize.setDoubleBuffered(true);
        btnMinimize.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMinimize.setMaximumSize(new java.awt.Dimension(24, 24));
        btnMinimize.setMinimumSize(new java.awt.Dimension(24, 24));
        btnMinimize.setName("btnMinimize"); // NOI18N
        btnMinimize.setPreferredSize(new java.awt.Dimension(24, 24));
        btnMinimize.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bixly/pastevid/resources/min.png"))); // NOI18N
        btnMinimize.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bixly/pastevid/resources/min.png"))); // NOI18N
        btnMinimize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizeActionPerformed(evt);
            }
        });

        lblVideoQuality.setForeground(new java.awt.Color(255, 255, 255));
        lblVideoQuality.setText("Video Quality:");

        jSliderFast.setMajorTickSpacing(1);
        jSliderFast.setMaximum(2);
        jSliderFast.setSnapToTicks(true);
        jSliderFast.setName("jSliderFast"); // NOI18N
        jSliderFast.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jSliderFastMouseReleased(evt);
            }
        });
        jSliderFast.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderFastStateChanged(evt);
            }
        });
        jSliderFast.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jSliderFastMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jfSettingsLayout = new javax.swing.GroupLayout(jfSettings);
        jfSettings.setLayout(jfSettingsLayout);
        jfSettingsLayout.setHorizontalGroup(
            jfSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfSettingsLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblVideoQuality)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSliderFast, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                .addComponent(btnMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        jfSettingsLayout.setVerticalGroup(
            jfSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jfSettingsLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jfSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSliderFast, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMinimize, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVideoQuality))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jfSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jfSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderFastMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderFastMouseReleased
    }//GEN-LAST:event_jSliderFastMouseReleased

    private void btnMinimizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizeActionPerformed
        ((JFrame) this.getParent().getParent().getParent().getParent()).setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_btnMinimizeActionPerformed

    private void btnCancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancel1ActionPerformed
        ((JFrame) this.getParent().getParent().getParent().getParent()).dispose();
    }//GEN-LAST:event_btnCancel1ActionPerformed

    private void jSliderFastMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSliderFastMouseMoved
    }//GEN-LAST:event_jSliderFastMouseMoved

    private void jSliderFastStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderFastStateChanged
        // Sets the video quality based on the new value of the slider and 
        // updates the displayed tooltip.
        log("New jSliderFast Value: " + jSliderFast.getValue());
        switch (jSliderFast.getValue()) {
            case 0:
                jSliderFast.setToolTipText("Fast: Quickest completion time, lower video quality");
                break;
            case 1:
                jSliderFast.setToolTipText("Medium: Normal completion time, good video quality");
                break;
            case 2:
                jSliderFast.setToolTipText("Slow: Slowest completion time, highest video quality");
                break;
            default:
                log("No such value for Video Quality, check input");
                return;
        }
        this.recorder.saveVideoQuality(jSliderFast.getValue());
        this.redrawWindow();
    }//GEN-LAST:event_jSliderFastStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnCancel1;
    public javax.swing.JButton btnMinimize;
    private javax.swing.JSlider jSliderFast;
    private com.bixly.pastevid.util.view.JRoundedPanel jfSettings;
    private javax.swing.JLabel lblVideoQuality;
    // End of variables declaration//GEN-END:variables

    /**
     * Enables or disables input for the video quality slider.
     * Only used in JUnit tests.
     * @param bln True to enable
     */
    void setEnableControls(boolean bln) {
        this.jSliderFast.setEnabled(bln);
    }

    public void log(Object message) {
        LogUtil.log(SettingsPanel.class, message);
    }
}
